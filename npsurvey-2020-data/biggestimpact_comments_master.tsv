Q8.1 What single immediate change to NumPy would bring the most value to you as a NumPy user?
COMMENTS
Something Community-wise, I'm sure.
Versatile boundary conditions for time integration
More readable documentation would be welcome but otherwise NumPy is awesome!
It would be really nice to have an api from numpy that evaluated the performance costs/benifits between different function calls with some input data, (like np.mat vs np.array, or np.dot vs np.einsum). It would make it easier to compare and see what I should be using in a specific case
low-level parallel computing
Support for hardware accelerators
simple possibility to use different CPU cores for parallel different arrays calculating without complex sintax
N-D linear interp
Easier docs for multidimensional operations (from stack/roll to whatever)
Clear and concise concatenation of 1D arrays to form a shape (N, 2) array. Currently using `np.vstack((...)).T'.
Improvements in Documentation
Working with JAX to add the numpy protocols. Then I can really use either library however I want!
a homogeneous use of size and shape parameters :p
More docs
Give more examples along with the documentation, give use cases, redesign docs page
Documentation
More and better examples of using Numpy with more realistic data. (Original in Spanish: Más y mejores ejemplos de uso de Numpy con datos más realistas.)
Clearer documentation
optional parallel computing
Static typing
Multi-threading by default
even better docs
Documentation (tutorials)
documentation
cleaner separation with scipy of FT - 2 equivalent modules with differences !
Documentation improvement to add clearer examples (maybe with some visualizations)
Clearer opportunities to give back to the community
Type hints
Better documentation. Examples. And explanation of underlying logic. It's already good. But always could be better
documentation should be more interactive
better documentation, with more examples and use cases.
More speed ;)
NEP 21
Better error messages and error handling. Sometimes numpy has incorrect statements and includes text not intended for the error message.
More functionalities for images 2d and 3d
Faster multi-threaded operations (but this is out of scope and I'm happy using other libraries)
Not sure. I generally love Numpy! Maybe including the Minuit optimization package more formally into the numpy ecosystem.
[honestly it's perfect]
why zeros() uses shape, while randint() uses size? I always forget which is which
less pickiness about what kind of sequence of things a function (array, list, tuple ...) can accept (this may be a general Python issue, though.)
More speed! I use numpy because it’s fast - I want more of that. Also articles and tips on how to use performance features (out kwarg comes to mind)
More extensive and tutorial like documentation like stack overflow is with a continuous example
Parallelization
Easier/native reading of Fortran binary files
GPU backend :)
more hand-on with simple level 100 to 500
GPU support
A clarification in the function documentation to quickly know if it works in view or in copy. (Original in French: Une clarification dans la documentation des fonctions pour savoir rapidement si elle travaille en vue ou en copie.)
CUDA integration...
Better native GPU integration
Low level explainations
GPU acceleration
Better tutorial/documentation on how to efficiently use numpy features (ufunc etc.)
small matrix optimizations
Better type annotations
Add homogeneous transformations
I can proudly say all the improvements I want to see (in things like docs) would be large, no low hanging fruit.
CUDA
Easy Documentation.. New learning is difficult with the current documentation model
copy vs original array specifications
Multithreaded functions
Better alternative for SWIG to wrap a proprietary I/O library written in C++
Full fledged typing (mypy) support, with dimensions, shape and dtype.
Way to access specific parts of the library since putting numpy in production is heavy. (Original in Spanish: Manera de acceder a partes específicas de la librería ya que poner numpy en produccion es pesado.)
User-defined scalar types (e.g. high precision floats)
Better performance (paralelization)
Alternatives to very large arrays (memory error). (Original in Spanish: Alternativas a arrays muuuy grandes (memory error).)
I would love to see some kind of series of videos or webinars teaching numpy
np.unique should accept a tolerance keyword that treats floats as the same if they differ by less than the tolerance.
A more user friendly vector class for linear algebra
Performant vectorisation
More integration with numba jit & cuda
Performance comparable to rust ndarray (in my experience when used correctly Rust ndarray is ~2x faster)
Improved seo that puts the latest docs at the top of searches. I frequently will end up with links to 1.15 docs
Column vectors as default as opposed to 1d vectors.
Names dimensions
More visualization tools
More examples of use with visualisation tools
how ndarray is displayed as a 2D list not matrix
Improve performance
integer calculations like prime factorization
Creation of a reliable binary format storage option.
Integrate quaternions as a basic type. (Original in Spanish: Integrar los cuaterniones como un tipo básico.)
GPU usage
Tools for simulations (Monte Carlo method, generation of random numbers). (Original in Spanish: Herramientas para simulaciones (método Monte Carlo, generación de números aleatorios). )
Support to visualize data (matplotlib often too complicated)
Greater integration with Python. (Original in Spanish: Mayor integración con Python.)
.index() ... I've been seriously considering dropping numpy entirely in favour of pytorch over this, and frankly given how long it's been I think it might be prudent to do so even if numpy added .index() today.
Better documentation
Speed ​​and ease of use. (Original in Spanish: Velocidad y facilidad de uso.)
Greater reach to users in general. (Original in Spanish: Mayor alcance a las usuarias en general.)
Consistent null value handling bumpy array
An easier way to handle arrays larger than memory
Some finances module, but other than that is awesome as it is now
optimization
Documentation
Best practices
Support for type annotations
GPU support
beginner-friendly numpy is too comp.
Making faster. Python is inefficient and Numpy does not help by default.
signal processing and filter design tools (lighter weight versions of the tools in scipy)
I think your masked array implementation is kind of clunky. The relationship between the mask and the underlying data array can get confusing. In particular, the behavior of the fill value is confusing. Setting something to the fill value in the data array doesn't change the mask. Changing the mask doesn't seem to update the data array. It's been a while since I've had to deal with this issue, but it can get confusing.
Better modern Fortran support in f2py
np.nan for int arrays
Better control of array memory.
Add an HOWTO example to documentation on how to extend Numpy with a gufunc written in Cython
Fixing masked array and making them "first-class citizens".
Examples and documentation
Make the API reference less ad-hoc. See the Java docs for the ideal model.
Ragged arrays/dtypes
more How Tos
Contract Simplification (mainly the sugar side of things)
portability
Better bug tracking (current number of open but duplicated bugs in GitHub is excessive)
JIT
Efficiency
This might not be possible but having a fast way to iterate through arrays in a python for loop would make some operations easier.
Allowing users to perform operations with one dimension removed. Eg adding a matrix of (3,4) to a vector of shape (3,)
Improvements in performance
Add a way to keep track of units and to display answers with units
ONNX support
Easier to understand documentation
linear interpolation along an axis
In-built visualization support for NumPy arrays. Would make it easier to visualise high dimensional arrays.
rational number support with arbitrary capacity (int8, int16, etc). Need this for chemical stoichiometry calculations, specifically for calculating nullspace of stoichiometry matrix.
Stop unwrapping zero-dimensional arrays into scalars.
Most of the documentation examples are extremely concise, and only illustrate one to a few uses of an API.
consistency with xarray api, migration path to using numpy.random with Jax
It's hard to say. Numpy is probably my favorite library ever. If I was forced, maybe a course developed for both new and intermediate users.
Would love a feature to extract both the min and max of an array (with an optional axis parameter) in one stride
Documentation and Examples
GPU
Be able to transform a 1D horizontal array to a 2D vertical array with the '.T' transform.
GPU usage
More examples of its use (particularly for my specific domain).
Became more Developer friendly
Mentorship (stronger involvement in NumPy). Some less used features are completely unknown to me and it is hard to find tutorials/materials on them besides the documentation.
Updated documentation for f2py
Clearer separation between numpy and scipy in overlapping domains (linalg comes to mind)
Comprehensive documentation
Increased adoption by other frameworks of __array_function__ protocol
Automatic differentiation
A place for writing and submitting tutorials on how to implement things in numpy, and ways to link numpy functions to these tutorials.
Speed
Some statistical or linear algebra functions are both in scipy and numpy, this is confusing for me.
more documentation for advanced users for maximum performance
Tutorials and more examples in documentation
Usability. Make it simpler to use
a ruthless standardization on snake_case methods instead of "sometimes it's .foobar() and sometimes it's .foo_bar()"
Multithreaded einsum
Better tutorials and or easier way to create ufuncs
Language-independent API
FASTER
even better integration with other toolkits
Performance boosts using inherent parallelism.
new nditer C API support in Cython
numpy.dot should work on arrays of shape (...,n) x (n,...).
allowing to slice an array with another array
autodiff [but I am not sure I'd want it in numpy!]
Maybe easier way to move data between library especially deep learning.
Better documentation of packages.
Static type hints
Increased random support. (Original in Spanish: Mayor soporte de random.)
Have a better documentation and tutorials.
GPU
Nullable integers
Smaller steering committee
randomized linear algebra
Proper methods for 1:1 image display in matplotlib
Plotting data easily
I would like an explicit pointer syntax
more examples in the wild. This is largely out of numpy's control though.
F2py handle Fortran 2008 and be thread safe
ability to run on GPU.
I run into floating point rounding errors often, sometimes that cause large bugs. This seems to stem from np.loadtxt.
I would like documentation in Spanish in the most complex areas. (Original in Spanish: Me gustaria documentacion en español en las areas mas complejas.)
NEP-35 and NEP-37 widespread adoption
A document describing best practices for using NumPy for scientific computing, targeted to a researcher using the package with limited computer science knowledge.
Better array reps in jupyter ?
Better documentation of linear algebra wrappers
Better examples on doc pages. Almost always I have to check stackoverflow to understand the function better.
Performance
anything to help bring people update with confidence - the BDFL for my project still uses py27, and it's been pulling teeth to get him to 1.14. Even though I use 1.16 and 1.18 depending on the project, he is nervous because he remembers 'that one time numpy changed how views are handled'
More tutorials and use cases for linear algebra
CUDA backend like jax
Parallelization features
Defining a numpy array with a string index
An API/set of hooks to allow functions like `concatenate` to create duck arrays/subclasses.
More tutorials
Adding the feature I requested
Faster masked arrays
Manipulation of ndarrays (indexing into, reshaping, etc.) could stand to be a little more transparent.
Type annotations. (But that's coming, from what I hear!)
this is a big ask, but it would be nice if numpy could run on gpus
Better string array support and performance
Integration with units libraries
Custom dtypes
Providing the features that would stop PyTorch, TensorFlow, JAX, etc. from reimplementing NumPy and fragmenting the ecosystem. I think this is only CPU/GPU transparency (i.e. absorb CuPy). We don't want to go back to the days of Numeric vs NumArray!
Faster FFTs.
more robust documentation
best practice and performance comparison of optimal/sub-optimal usages, and tutorial/documentation in this direction
I usually switch away from Numpy when my arrays contain strings. Perhaps there is a better way?
(py)FFTW backend
Interoperability with other low level array libraries.
Unite Numpy and Scipy in a single project / library. (Original in Spanish: Unir Numpy y Scipy en un único proyecto / librería.)
Why do you speak in feminine? (Original in Spanish: Por que habláis en femenino?)
newcomers tutorials
Parallelism in summations. (Original in Spanish: Paralelismo en sumatorias.)
A clearly defined and smaller API that is 100% compatible with Dask, CuPy and other array libraries.
Improved performance. (Original in Japanese: パフォーマンスの向上.)
processing speed. (Original in Japanese: 処理速度.)
Packaging of mkl libraries other than conda (wheel). (Original in Japanese: conda以外のmklライブラリのパッケージ化(wheel).)
Stochastic linear algebra; specifically the ability to find the determinant of a LinearOperator. This might fit better in SciPy than NumPy
Adding a "a.b" notation for dot products
A more consistent API, perhaps? (Original in Portuguese: Uma API mais consistente, talvez?)
Increase the types of special functions. (Original in Japanese: 特殊関数の種類を増やします.)
Documentation accessibility
Matrix operations
more error messages for debugging
Make numpy.unique() handle objects arrays containing None again - this was working in Py2.
became a framework
As optimization libraries
As a user, probably improved clarity/consistency of the documentation
Adding the option to use more functions as methods. For many operations (sum, max, argmax, real/imag...) we have the option to access them as functions or methods. Many others (abs, angle, diff, sin, cos...) can only be used as functions. Sometimes it would be cleaner to write code with these as methods.
Multithreaded 2 and 3 dimensional FFTs
Easy but efficient parallelism (like Mathematica's ParallelMap).
closer coordination with pandas
support NA/missing values
Synchronization between numpy.linalg and scipy.linalg.
changing numpy's name to np!!!
faster small arrays
A more intuitive dtype system.
separate the C code from the python code: less extensive use of the CPython C-API
Weighted quantiles. I'm working on it
numpy &lt;---&gt; netCDF examples. I know how to do it, but "exchange" between formats would be better documented
Codifying a “minimal NumPy”
labelled arrays